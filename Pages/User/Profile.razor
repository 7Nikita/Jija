@page "/account/profile"

@attribute [Authorize]

@using Jija.Models
@using Jija.Models.Account
@using Jija.Models.Github
@using Jija.Services
@using Jija.Services.Github;
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity

@inject JWTService JWTService
@inject GithubService GithubService
@inject UserManager<User> UserManager
@inject DatabaseContext DatabaseContext
@inject NavigationManager NavigationManager
@inject StateChangedService StateChangedService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

 <div class="d-flex">
            @if(githubToken == null)
            {
                <div style="margin: 0 auto;">
                    <a class="btn btn-primary " href=@githubOauthUrl>
                           Sign in with Github
                    </a>
                </div>
                
            }
            else
            {
                <div class="p-2 pr-xl-6" style="padding-right: 40px !important;">
                    <div>
                        <img class="avatar" src=@githubAvatarUrl width="260" height="260"/>
                    </div>
                    <div class="pt-3">
                        <span class="card-fullname">@userName</span>
                        <span class="card-std-text">@githubLogin</span>
                        <span class="card-std-text">@userEmail</span>
                    </div>
                </div>

                <div class="p-2" style="flex:1;">
                    <div class="underline_nav">
                        <nav class="d-flex">
                            <a class="nav_item nav_item_active">
                                Repositories
                            </a>
                            <a class="nav_item">
                                Projects
                            </a>
                        </nav>
                    </div>

                    <ul class="list-group">
                        @if (repos.Count > 0)
                        {
                            @foreach (var item in repos)
                            {
                                <li class="border-bottom py-4">
                                    <div>
                                        <h3><a class="list_item__title" href=@item.html_url>@item.name</a></h3>
                                    </div>
    
                                </li>
                            }
                        }
                    </ul>
                </div>
            }
    </div>

@code
{
    private User _user;
    private string githubToken;
    private string githubOauthUrl;
    private string userName;
    private string userEmail;
    
    private string githubAvatarUrl;
    private string githubLogin;
    
    private List<RepositoryInfoDTO> repos = new List<RepositoryInfoDTO>();
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await StateChangedService.GetAuthenticationStateAsync();
        
        _user = DatabaseContext.Users
            .Include(u => u.GithubUser)
            .Where(u => u.UserName == authState.User.Identity.Name)
            .Select(u => u)
            .SingleOrDefault();
        
        userName = _user.UserName;
        userEmail = _user.Email;
        
        githubToken = _user.GithubUser.AccessToken;
        githubAvatarUrl = _user.GithubUser.AvatarUrl;
        githubLogin = _user.GithubUser.Login;
        
        githubOauthUrl = GithubService.GetOauthRequestUrl();

        var uriBuilder = new UriBuilder(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        if(query["code"] != null)
        {
            await GetGithubToken(query["code"]);
        }
        await GetGithubRepos();
    }

    private async Task GetGithubToken(string code)
    {
        var result = await GithubService.SetOauthToken(code, _user);
        if(string.IsNullOrEmpty(result.ErrorMessage))
        {
            githubToken = result.Response.access_token;
            await GetGithubUserInfo(githubToken);
        }
        StateHasChanged();
    }
    
    private async Task GetGithubUserInfo(string token)
    {
        var setUserInfoResult = await GithubService.SetGithubUserInfo(_user);
        if(string.IsNullOrEmpty(setUserInfoResult.ErrorMessage))
        {
            githubAvatarUrl = setUserInfoResult.Response.avatar_url;
            githubLogin = setUserInfoResult.Response.login;
        }
    }

    private async Task GetGithubRepos()
    {
        var reposResult = await GithubService.GetUserRepositories(_user);
        if (string.IsNullOrEmpty(reposResult.ErrorMessage))
        {
            repos = reposResult.Response;
        }
    }
}