@page "/account/login"

@using Jija.Models
@using Jija.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity

@inject JWTService JwtService
@inject UserManager<User> UserManager
@inject StateChangedService StateChangedService
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<EditForm Model="@loginForm" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <InputText class="form-control" id="inputUserName" placeholder="username" @bind-Value="loginForm.UserName" />
    </div>
    <div class="form-group">
        <InputText type="password" class="form-control" id="inputPassword" placeholder="password" @bind-Value="loginForm.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Log in</button>
</EditForm>

<div class="mt-3">
    <p>@errorMessage</p>
</div>

@code {
    private LoginForm loginForm = new LoginForm();
    private string errorMessage;

    private async Task OnValidSubmit()
    {
        var user = await UserManager.FindByNameAsync(loginForm.UserName);
        if(!(user is null))
        {
            if(await UserManager.CheckPasswordAsync(user, loginForm.Password))
            {
                await SetJWT(user);
                NavigationManager.NavigateTo("/account/profile");
            }
            else
            {
                errorMessage = "Incorrect password.";
            }
        }
        else
        {
            errorMessage = "Incorrect username.";
        }
    }

    private async Task SetJWT(User user)
    {
        var token = await JwtService.GenerateJWT(user);
        await localStorage.SetItemAsync("token", token);
        var identity = new ClaimsIdentity(await JwtService.GetClaims(user), "Base Authentication");
        var principal = new ClaimsPrincipal(identity);
        StateChangedService.SetAuthenticationState(Task.FromResult(new AuthenticationState(principal)));
        StateChangedService.NotifyStateChanged();
    }
}