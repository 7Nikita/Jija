@page "/projects/{Id:int}"

@attribute [Authorize]

@using Jija.Models.Core
@using Jija.Models
@using Jija.Services
@using Jija.Models.Account
@using Microsoft.Extensions.Logging

@inject DbService DbService
@inject IProjectService ProjectService
@inject IRepoService RepoService
@inject IInviteService InviteService
@inject ITicketService TicketService

@if(errorMessage != null)
{
    <h1>@errorMessage</h1>
}
else
{
    @if (isOwner)
    {
        <EditForm Model="@inviteForm" OnValidSubmit="@OnInvite">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class=" invite-form">
                <h3>Invite</h3>
                <div class=" d-flex align-items-end">
                    <div class="mt-3 ">
                                 <label for="username">Username</label>
                                <InputText class="form-control" id="username" placeholder="username" @bind-Value="inviteForm.Username" />
                    </div>
                    <div class="form-check mt-3">
                            <button type="submit" class="btn btn-primary">Send Invite</button>
                    </div>
                </div>
            </div>
        </EditForm>                    

    }


    <div class="d-flex justify-content-center">
        <a class="btn btn-success 2-75" href="/new_ticket/@Id">Create ticket</a>
    </div>

    <div class="tasklist_form">
        <div class="task-list mr-3">
            <div class="task-list__header">
                <div class="tasklistname">
                    Opened
                </div>
            </div>
            @if (openedTickets != null)
            {
                @foreach (var t in openedTickets)
                {
                    <div class="p-3">
                        <div class="task_form">
                            <div class="task_title">
                                <div>@t.Name</div>

                                <div class="task_menu">
                                    <a href="/edit_ticket/@Id/@t.Id"><i class="fas fa-edit"></i></a>
                                    <button class="fas fa-times" @onclick="@(async e => await OnTicketDelete(t))"></button>
                                </div>
                            </div>

                            <div class="task_description">
                                @t.Description
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <div class="task-list mr-3">
            <div class="task-list__header">
                <div class="tasklistname">
                    In Progress
                </div>
            </div>
            @if (progressTickets != null)
            {
                @foreach (var t in progressTickets)
                {
                    <div class="p-3">
                        <div class="task_form">
                            <div class="task_title">
                                <div>@t.Name</div>

                                <div class="task_menu">
                                    <a href="/edit_ticket/@Id/@t.Id"><i class="fas fa-edit"></i></a>
                                    <button class="fas fa-times" @onclick="@(async e => await OnTicketDelete(t))"></button>
                                </div>
                            </div>

                            <div class="task_description">
                                @t.Description
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <div class="task-list mr-3">
            <div class="task-list__header">
                <div class="tasklistname">
                    Done
                </div>
            </div>
            @if (doneTickets != null)
            {
                @foreach (var t in doneTickets)
                {
                    <div class="p-3">
                        <div class="task_form">
                            <div class="task_title">
                                <div>@t.Name</div>

                                <div class="task_menu">
                                    <a href="/edit_ticket/@Id/@t.Id"><i class="fas fa-edit"></i></a>
                                    <button class="fas fa-times" @onclick="@(async e => await OnTicketDelete(t))"></button>
                                </div>
                            </div>

                            <div class="task_description">
                                @t.Description
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <div class="users_form">
                <h3 class="users_titles">Users</h3>
                @if (contributors != null)
                {
                    @foreach (var contributor in contributors)
                    {
                        <div class="user_card">
                            <div><img class="user_img" src="@contributor.Contributor.GithubUser.AvatarUrl"/></div>
                            <div>@contributor.Contributor.UserName</div>
                            <button class="fas fa-times" @onclick="@(async e => await RemoveContributor(@contributor))"></button>
                        </div>
                    }
                }
        </div>
                    
    </div>
}
@code {

    [Parameter]
    public int Id { get; set; }

    private string errorMessage = null;

    InviteForm inviteForm = new InviteForm();
    
    List<Ticket> openedTickets;
    List<Ticket> progressTickets;
    List<Ticket> doneTickets;

    List<ProjectUser> contributors;
    
    private bool isOwner = false;
    private Project project;
    private Models.Account.User user;
    
    protected override async Task OnInitializedAsync()
    {
        project = await ProjectService.Find(Id);
        if(project == null)
        {
            errorMessage = "Project does not exist";
            return;
        }
        
        user = await DbService.GetUser();
        if(project.Owner.Id != user.Id && !(await ProjectService.IsContributor(project, user)))
        {
            errorMessage = "Access denied";
            return;
        }
        
        if (project.Owner.Id == user.Id)
        {
            isOwner = true;
        }
        
        await ReloadTickets();
        
        contributors = project.Contributors;
    }
    
    private async Task OnInvite()
    {
        var msg = $"You were invited to {project.Name} project!";
        var success = await InviteService.CreateInvite(project, inviteForm.Username, msg);
        if(success)
        {
            StateHasChanged();
        }
    }

    private async Task OnTicketDelete(Ticket ticket)
    {
        var success = await TicketService.DeleteTicket(ticket);
        if(success)
        {
            await ReloadTickets();
            StateHasChanged();
        }
    }

    private async Task ReloadTickets()
    {
        openedTickets = await TicketService.FindTicketByStatus(project, TicketStatus.Opened);
        progressTickets = await TicketService.FindTicketByStatus(project, TicketStatus.InProgress);
        doneTickets = await TicketService.FindTicketByStatus(project, TicketStatus.Done);
    }

    private async Task RemoveContributor(ProjectUser contributor)
    {
        await ProjectService.RemoveContributor(contributor);
        StateHasChanged();
    }
    
}