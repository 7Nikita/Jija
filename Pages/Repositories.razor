@page "/repositories"
@attribute [Authorize]

@using Jija.Models
@using Jija.Models.Core
@using Jija.Models.Github
@using Jija.Services
@using Jija.Services.Github

@inject DbService DbService
@inject ProjectService ProjectService
@inject RepoService RepoService
@inject IGithubService GithubService


<div class="p-2" style="flex:1;">
    <div class="underline_nav">
        <nav class="d-flex">
            <a class="nav_item nav_item_active">
                 Repositories
            </a>
        </nav>
    </div>
</div>

<div class="d-flex">
    <div class="p-2" style="flex:1;">
            @if(repos == null) 
            {
                <p>Loading...</p>
            }
            else if(repos.Count == 0)
            {
                <p>You don`t have any repositories :(</p>
            }
            else
            {
                @foreach(var repo in repos)
                {
                    <ul class="list-group">
                        <li class="border-bottom py-4">
                            <div>
                                <h3><a class="list_item__title" href=@repo.html_url>@repo.name</a></h3>
                                <h4 class="list_item__description">@repo.description</h4>
                                <p>
                                    <button class="btn btn-success mt-3" @onclick="@(async e => await AddRepository(repo))">Add Repository</button>
                                </p>
                             </div>
                            
                        </li>
                    </ul>
                }
            }
    </div>
</div>

@code {

    private Models.Account.User _user;
    private List<RepositoryInfoDTO> repos;
    
    protected override async Task OnInitializedAsync()
    {
        _user = await DbService.GetUserAndRepos();
        repos = new List<RepositoryInfoDTO>();
        await GetRepositories();
    }

    
    private async Task GetRepositories()
    {
        var result = await GithubService.GetUserRepositories(_user);
        if(result.ErrorMessage == null)
        {
            result.Response.ForEach(r => repos.Add(r));
        }
    }

    private async Task AddRepository(RepositoryInfoDTO githubRepository)
    {
        var success = await RepoService.CreateRepo(_user, githubRepository.id, githubRepository.name, githubRepository.description, githubRepository.html_url);
        if(success)
        {
            StateHasChanged();
        }
    }

    private async Task DeleteRepository(Repository repository)
    {
        var success = await RepoService.DeleteRepo(repository);
        if(success)
        {
            StateHasChanged();
        }
    }
    
}